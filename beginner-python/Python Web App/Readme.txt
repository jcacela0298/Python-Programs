I built a Python Web Application that takes a Celsius value for input and returns a Fahrenheit value.

To use this program, save both the server.py file and the index.html file into the same folder. If you want to use the command prompt, navigate to the appropriate directory and, after running the server.py file, the program will state that it is serving at port 8080. Once you see this, navigate to your favorite web browser and type localhost:8080 into the search bar. Press enter and you will be redirected to the web app.

For this project, I learned many things. I learned that in order to make a working web page, we need an index.html file and a server.py file. For the index.html file, I learned that <title> within <head> is important for "SEO", which stands for search engine optimization for when people search on google -- if their search is close to what is within the <title>, it is more likely to be found. It also serves as the default bookmark text if the website is set as a bookmark. Furthermore, I learned more about overall html file formatting, and how to put labels and input types for user interaction. The "<form action="/convert" method="get">" attribute is important because it specifies the URL to which the form data will be submitted when the user clicks the "Convert" button, so in our case, the form is set to submit to the /convert URL path using the GET method. Then, once the /convert path occurs, the server.py file's handler method will handle this appropriately.

For the server.py file, this is where our logic takes place. We need to import the 3 necessary  factors for the server to work and parse the data into a format that makes sense. We then need to identify the port number -- 8080 is standard and doesn't often conflict with other pre-defined ports. We create a TCP server that listens at that defined port, and we make a MyHandler class that overrides the simpleHTTPRequestHandler class's get method. In this method, we get the parsed url from the web page, and the result depends on two factors. If the convert button is not clicked, then the HTTP server simply returns the index.html page. If the convert button is clicked (and then meets the criteria within the convert to fahrenheit method within the server.py file), the conversion is performed, the success response code is sent, the user is taken to a new page, and the method also ensures the output format is in proper UTF-8 format. I also learned about f strings, and how Python typically generates a new HTML page instead of updating the current page for the get request and response, whereas JavaScript can allow for updating the same page's content and thus creating SPA's, which stand for single page applications. Python is server side and focuses more on processing data and performing business logic with new HTML page generation whereas  JavaScript is client side, and it focuses more on enhancing user interface.